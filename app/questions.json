[
  {
    "question": "Что такое модуль в Java?",
    "options": ["A) Библиотека", "B) Класс", "C) Пакет", "D) Интерфейс"],
    "answer": "C"
  },
  {
    "question": "Какой модификатор доступа используется для классов, интерфейсов и методов, чтобы они были видны только внутри пакета?",
    "options": ["A) public", "B) private", "C) protected", "D) default"],
    "answer": "D"
  },
  {
    "question": "Какой оператор используется для импорта класса из другого пакета в Java?",
    "options": ["A) import", "B) include", "C) require", "D) use"],
    "answer": "A"
  },
  {
    "question": "Какой ключевой момент используется для наследования в Java?",
    "options": ["A) extends", "B) implements", "C) inherits", "D) extends/implements"],
    "answer": "A"
  },
  {
    "question": "Какой модификатор доступа используется, чтобы разрешить доступ к члену класса только внутри его собственного пакета и подклассам?",
    "options": ["A) public", "B) private", "C) protected", "D) default"],
    "answer": "C"
  },
  {
    "question": "Какие ключевые слова используются для создания интерфейсов в Java?",
    "options": ["A) interface", "B) class", "C) interface/class", "D) implements"],
    "answer": "A"
  },
  {
    "question": "Какой модификатор доступа используется для членов класса, которые видны только внутри класса?",
    "options": ["A) public", "B) private", "C) protected", "D) default"],
    "answer": "B"
  },
  {
    "question": "Какие из следующих утверждений верны для модулей Java?",
    "options": ["A) Модули предоставляют лучшую инкапсуляцию", "B) Модули могут содержать пакеты", "C) Модули могут импортировать другие модули", "D) Все вышеперечисленное"],
    "answer": "D"
  },
  {
    "question": "Какие из следующих ключевых слов используются для управления экспортом пакетов в модуле?",
    "options": ["A) exports", "B) opens", "C) provides", "D) requires"],
    "answer": "A"
  },
  {
    "question": "Какие модификаторы доступа можно использовать внутри модуля Java?",
    "options": ["A) public", "B) private", "C) protected", "D) default"],
    "answer": "A"
  },
  {
    "question": "Какой оператор используется для открытия модуля и предоставления доступа к его содержимому другим модулям?",
    "options": ["A) exports", "B) opens", "C) provides", "D) requires"],
    "answer": "A"
  },
  {
    "question": "Что такое рефлексия в Java?",
    "options": ["A) Способ вызова методов на удаленных объектах", "B) Способ получения информации о классах, методах и полях во время выполнения", "C) Механизм для сортировки данных в коллекциях", "D) Механизм управления потоками выполнения"],
    "answer": "B"
  },
  {
    "question": "Что такое аннотация в Java?",
    "options": ["A) Класс для хранения данных", "B) Метка, предоставляющая информацию о классе, методе или поле", "C) Интерфейс для создания пользовательских исключений", "D) Класс для создания потоков"],
    "answer": "B"
  },
  {
    "question": "Что такое исключение (exception) в Java?",
    "options": ["A) Структура данных для хранения пар ключ-значение", "B) Ошибка, возникающая во время выполнения программы", "C) Специальный тип цикла", "D) Класс для работы с датами и временем"],
    "answer": "B"
  },
  {
    "question": "Какой класс используется для обработки исключений в Java?",
    "options": ["A) Exception", "B) Error", "C) Throwable", "D) RuntimeException"],
    "answer": "A"
  },
  {
    "question": "Какие ключевые слова используются для создания и обработки исключений в Java?",
    "options": ["A) try и catch", "B) if и else", "C) for и while", "D) switch и case"],
    "answer": "A"
  },
  {
    "question": "Какой блок кода обязателен при обработке исключений с использованием конструкции try-catch?",
    "options": ["A) try", "B) catch", "C) finally", "D) throw"],
    "answer": "B"
  },
  {
    "question": "Какие исключения являются проверяемыми (checked) исключениями в Java?",
    "options": ["A) RuntimeException и его подклассы", "B) Exception и его подклассы, кроме RuntimeException", "C) Error и его подклассы", "D) Все исключения в Java являются проверяемыми"],
    "answer": "B"
  },
  {
    "question": "Что такое многопоточность (multithreading) в Java?",
    "options": ["A) Способность приложения выполнять несколько задач одновременно", "B) Способность приложения создавать несколько экземпляров классов", "C) Способность приложения обрабатывать исключения", "D) Способность приложения создавать исключения"],
    "answer": "A"
  },
  {
    "question": "Как создать новый поток в Java?",
    "options": ["A) Создать новый объект класса Thread", "B) Использовать метод start() класса Thread", "C) Создать новый объект класса Runnable", "D) Использовать метод run() класса Thread"],
    "answer": "A"
  }
]
