[
  {
    "question": "Что такое лямбда-выражение в Java?",
    "options": ["A) Это анонимная функция", "B) Это статический метод", "C) Это конструктор класса", "D) Это переменная"],
    "answer": "A) Это анонимная функция"
  },
  {
    "question": "Как объявить лямбда-выражение в Java?",
    "options": ["A) (parameters) -> expression", "B) lambda(parameters) { expression }", "C) lambda(parameters) -> { expression }", "D) lambda(parameters) => expression"],
    "answer": "A) (parameters) -> expression"
  },
  {
    "question": "Какие типы переменных могут использоваться в лямбда-выражениях в Java?",
    "options": ["A) Только final или effectively final", "B) Только static", "C) Любые типы", "D) Только примитивные типы"],
    "answer": "A) Только final или effectively final"
  },
  {
    "question": "Что такое функциональный интерфейс в контексте лямбда-выражений в Java?",
    "options": ["A) Это интерфейс с одним абстрактным методом", "B) Это интерфейс без методов", "C) Это интерфейс с несколькими методами", "D) Это интерфейс с методом main"],
    "answer": "A) Это интерфейс с одним абстрактным методом"
  },
  {
    "question": "Какие из следующих интерфейсов являются функциональными интерфейсами в Java?",
    "options": ["A) Runnable", "B) ActionListener", "C) Comparable", "D) Все вышеперечисленные"],
    "answer": "D) Все вышеперечисленные"
  },
  {
    "question": "Как вызвать лямбда-выражение в Java?",
    "options": ["A) Через метод call()", "B) Через метод run()", "C) Через метод execute()", "D) Через метод invoke()"],
    "answer": "B) Через метод run()"
  },
  {
    "question": "Какие преимущества предоставляют лямбда-выражения в Java?",
    "options": ["A) Краткость кода", "B) Уменьшение необходимости в анонимных классах", "C) Повышение читаемости кода", "D) Все вышеперечисленные"],
    "answer": "D) Все вышеперечисленные"
  }
]
