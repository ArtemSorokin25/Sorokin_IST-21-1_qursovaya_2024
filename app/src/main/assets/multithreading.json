[
  {
    "question": "Что такое многопоточность (multithreading) в Java?",
    "options": ["A) Способность приложения выполнять несколько задач одновременно", "B) Способность приложения создавать несколько экземпляров классов", "C) Способность приложения обрабатывать исключения", "D) Способность приложения создавать исключения"],
    "answer": "A) Способность приложения выполнять несколько задач одновременно"
  },
  {
    "question": "Как создать новый поток в Java?",
    "options": ["A) Создать новый объект класса Thread", "B) Использовать метод start() класса Thread", "C) Создать новый объект класса Runnable", "D) Использовать метод run() класса Thread"],
    "answer": "A) Создать новый объект класса Thread"
  },
  {
    "question": "Как завершить выполнение потока в Java?",
    "options": ["A) Вызвать метод stop() у объекта потока", "B) Позволить потоку завершиться самостоятельно", "C) Использовать метод terminate() у объекта потока", "D) Присвоить переменной потока значение null"],
    "answer": "B) Позволить потоку завершиться самостоятельно"
  },
  {
    "question": "Что такое synchronized блок в Java?",
    "options": ["A) Блок кода, который выполняется параллельно с другими потоками", "B) Блок кода, который выполняется только в одном потоке одновременно", "C) Блок кода, который выполняется в нескольких потоках одновременно, но с синхронизацией доступа к общим данным", "D) Блок кода, который выполняется только в случае возникновения исключения"],
    "answer": "C) Блок кода, который выполняется в нескольких потоках одновременно, но с синхронизацией доступа к общим данным"
  },
  {
    "question": "Что такое мьютекс в Java?",
    "options": ["A) Инструмент для разделения ресурсов между потоками", "B) Инструмент для защиты критической секции кода от одновременного доступа нескольких потоков", "C) Инструмент для создания новых потоков", "D) Инструмент для остановки выполнения потоков"],
    "answer": "B) Инструмент для защиты критической секции кода от одновременного доступа нескольких потоков"
  },
  {
    "question": "Какие методы класса Object используются для синхронизации потоков в Java?",
    "options": ["A) wait(), notify() и notifyAll()", "B) start() и join()", "C) yield() и sleep()", "D) interrupt() и isInterrupted()"],
    "answer": "A) wait(), notify() и notifyAll()"
  },
  {
    "question": "Какой метод позволяет потоку приостановить свою работу на некоторое время в Java?",
    "options": ["A) wait()", "B) join()", "C) sleep()", "D) yield()"],
    "answer": "C) sleep()"
  }
]
